<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="LanguageBar" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\LanguageBar.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ApplicationName" xml:space="preserve">
    <value>Keyboard Layout Auto Switch</value>
  </data>
  <data name="LocationBarRule" xml:space="preserve">
    <value>Location Bar</value>
  </data>
  <data name="SearchBarRule" xml:space="preserve">
    <value>Search Bar</value>
  </data>
  <data name="FindInPageRule" xml:space="preserve">
    <value>Find in Page</value>
  </data>
  <data name="DefaultPageRule" xml:space="preserve">
    <value>Other web pages</value>
  </data>
  <data name="DefaultUIElementRule" xml:space="preserve">
    <value>Other Browser controls</value>
  </data>
  <data name="PreviouslyVisitedPageRule" xml:space="preserve">
    <value>Previously visited web pages</value>
  </data>
  <data name="DomainRule" xml:space="preserve">
    <value>{0} web pages</value>
    <comment>{0}: Domain suffix</comment>
  </data>
  <data name="LanguageDisplayFormat" xml:space="preserve">
    <value>{0} / {1}</value>
    <comment>{0}: Culture Name
{1}: Keyboard Layout Name</comment>
  </data>
  <data name="FindInPageMatchWebPage" xml:space="preserve">
    <value>Match web page setting</value>
  </data>
  <data name="LanguageDoNotChange" xml:space="preserve">
    <value>Do not change</value>
  </data>
  <data name="LocationBarRuleDescription" xml:space="preserve">
    <value>When the Location Bar has the focus:</value>
  </data>
  <data name="SearchBarRuleDescription" xml:space="preserve">
    <value>When the Search Bar has the focus:</value>
  </data>
  <data name="FindInPageRuleDescription" xml:space="preserve">
    <value>When Find in Page has the focus:</value>
  </data>
  <data name="DefaultPageRuleDescription" xml:space="preserve">
    <value>For web pages which do not match any other rule:</value>
  </data>
  <data name="DefaultUIElementRuleDescription" xml:space="preserve">
    <value>When a Browser element that does not match any other rule has the focus:</value>
  </data>
  <data name="PrevioulsyVisitedPageRuleDescription" xml:space="preserve">
    <value>When a web page has previously been visited, and a different keyboard layout was manually switched to for it:</value>
  </data>
  <data name="DomainRuleDescription" xml:space="preserve">
    <value>For web pages where the domain name ends in:</value>
  </data>
  <data name="SaveRulesErrorMessage" xml:space="preserve">
    <value>Could not save rules to {0}:

{1}</value>
    <comment>{0}: File path
{1}: Error message
</comment>
  </data>
  <data name="IconMenuConfigure" xml:space="preserve">
    <value>Configure...</value>
  </data>
  <data name="IconMenuExit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="PreviouslyVisitedPageRestoreLayout" xml:space="preserve">
    <value>Restore last used keyboard layout</value>
  </data>
  <data name="IconMenuResetPreviouslyVisited" xml:space="preserve">
    <value>Clear Previously Visited</value>
  </data>
  <data name="PreviouslyVisitedPageRestoreLayoutForSite" xml:space="preserve">
    <value>Restore last used keyboard layout for site</value>
  </data>
  <data name="PreviouslyVisitedPageRuleNamePage" xml:space="preserve">
    <value>Previously visited page</value>
  </data>
  <data name="PreviouslyVisitedPageRuleNameSite" xml:space="preserve">
    <value>Previously visited site: {0}</value>
    <comment>{0}: Site domain</comment>
  </data>
  <data name="SwitchTooltip" xml:space="preserve">
    <value>Switched to '{0}' by rule: {1}</value>
    <comment>{0}: Keyboard layout
{1}: Rule description</comment>
  </data>
  <data name="IconMenuAddRule" xml:space="preserve">
    <value>Add Site Rule...</value>
  </data>
</root>